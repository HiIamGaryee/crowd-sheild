import {
  Box,
  Typography,
  Button,
  Card,
  CardContent,
  Grid,
  Paper,
  Avatar,
  Chip,
  IconButton,
  InputBase,
  FormControl,
  InputLabel,
  Select,
  MenuItem,
  TextField,
  Divider,
} from "@mui/material";
import {
  Search as SearchIcon,
  Warning,
  Groups,
  Assignment,
  Security,
  PlayArrow,
  Refresh,
  Download,
} from "@mui/icons-material";
import DashboardSidebar from "../components/DashboardSidebar";
import { useState, useEffect, useCallback } from "react";
import DashboardAPI from "../api/dashboardAPI";

// Type definitions
interface WhatIfAnalysis {
  situation: string;
  estimated_count: number;
  plan: string;
}

interface SimulationResult {
  metric: string;
  current: string;
  simulated: string;
  change: string;
  status: string;
}

const WhatIfPage = () => {
  const [eventType, setEventType] = useState("");
  const [crowdSize, setCrowdSize] = useState("");
  const [scenario, setScenario] = useState("");
  const [analysisResult, setAnalysisResult] = useState<WhatIfAnalysis | null>(
    null
  );
  const [loading, setLoading] = useState(false);
  const [recommendations, setRecommendations] = useState<any[]>([]);

  // Generate 10 mock recommendations
  const getAllRecommendations = useCallback(
    () => [
      {
        type: "critical",
        title: "Increase Crew Count",
        description: "Add 15 more crew members to maintain safety standards",
        priority: "High",
      },
      {
        type: "warning",
        title: "Modify Evacuation Routes",
        description: "Implement alternative exit strategies for better flow",
        priority: "Medium",
      },
      {
        type: "success",
        title: "Install Additional Sensors",
        description:
          "Deploy 5 more crowd density sensors in high-traffic areas",
        priority: "Low",
      },
      {
        type: "critical",
        title: "Emergency Medical Station",
        description:
          "Set up additional medical tent near Zone B for faster response",
        priority: "High",
      },
      {
        type: "warning",
        title: "Crowd Control Barriers",
        description:
          "Install temporary barriers to manage crowd flow during peak hours",
        priority: "Medium",
      },
      {
        type: "success",
        title: "Communication Upgrade",
        description:
          "Deploy 3 additional radio units for better crew coordination",
        priority: "Low",
      },
      {
        type: "critical",
        title: "Security Checkpoint Expansion",
        description: "Add 2 more security lanes to reduce entry wait times",
        priority: "High",
      },
      {
        type: "warning",
        title: "Weather Monitoring System",
        description: "Install real-time weather alerts for outdoor event areas",
        priority: "Medium",
      },
      {
        type: "success",
        title: "Food Vendor Relocation",
        description: "Move food stalls to reduce congestion in main walkways",
        priority: "Low",
      },
      {
        type: "critical",
        title: "Fire Safety Equipment",
        description: "Add 5 more fire extinguishers in high-risk areas",
        priority: "High",
      },
    ],
    []
  );

  // Function to randomly select 3 recommendations
  const getRandomRecommendations = useCallback(() => {
    const allRecommendations = getAllRecommendations();
    const shuffled = [...allRecommendations].sort(() => 0.5 - Math.random());
    return shuffled.slice(0, 3);
  }, [getAllRecommendations]);

  const runWhatIfAnalysis = async () => {
    if (!scenario.trim()) {
      alert("Please enter a scenario to analyze");
      return;
    }

    try {
      setLoading(true);

      // Generate new random recommendations when API is called
      setRecommendations(getRandomRecommendations());

      const result = await DashboardAPI.getWhatIfAnalysis(scenario);
      setAnalysisResult(result);
    } catch (error) {
      console.error("Error running what-if analysis:", error);
      alert("Error running analysis. Please try again.");
    } finally {
      setLoading(false);
    }
  };

  const exportResultsToPDF = () => {
    // Create a simple text-based report
    const reportData = `
CROWD SHIELD - WHAT-IF ANALYSIS REPORT
=====================================

Generated on: ${new Date().toLocaleDateString()}
Event Type: ${eventType || "Not specified"}
Crowd Size: ${crowdSize || "Not specified"}

SIMULATION RESULTS
==================

${simulationResults
  .map(
    (result) => `
${result.metric}:
  Current: ${result.current}
  Simulated: ${result.simulated}
  Change: ${result.change} (${result.status.toUpperCase()})
`
  )
  .join("")}

RECOMMENDATIONS
===============

${recommendations
  .map(
    (rec) => `
${rec.priority} Priority: ${rec.title}
${rec.description}
`
  )
  .join("")}

---
Generated by Crowd Shield Platform
www.crowdshield.com
    `;

    // Create and download the file
    const blob = new Blob([reportData], { type: "text/plain" });
    const url = window.URL.createObjectURL(blob);
    const link = document.createElement("a");
    link.href = url;
    link.download = `crowd-shield-analysis-${
      new Date().toISOString().split("T")[0]
    }.txt`;
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    window.URL.revokeObjectURL(url);
  };

  const scenarios = [
    {
      id: 1,
      name: "Emergency Evacuation",
      description:
        "Simulate emergency evacuation procedures for different crowd sizes",
      icon: <Warning sx={{ fontSize: 30 }} />,
      color: "critical.main",
      complexity: "High",
    },
    {
      id: 2,
      name: "Weather Impact",
      description: "Analyze crowd behavior during weather changes",
      icon: <Security sx={{ fontSize: 30 }} />,
      color: "warning.main",
      complexity: "Medium",
    },
    {
      id: 3,
      name: "Venue Capacity",
      description: "Test different venue capacities and crowd flow patterns",
      icon: <Groups sx={{ fontSize: 30 }} />,
      color: "safe.main",
      complexity: "Low",
    },
    {
      id: 4,
      name: "Crew Shortage",
      description: "Simulate scenarios with reduced crew availability",
      icon: <Assignment sx={{ fontSize: 30 }} />,
      color: "accent.main",
      complexity: "Medium",
    },
  ];

  // Generate simulation results based on analysis result
  const getSimulationResults = (): SimulationResult[] => {
    if (!analysisResult) {
      return [
        {
          metric: "Evacuation Time",
          current: "8.5 min",
          simulated: "N/A",
          change: "N/A",
          status: "info",
        },
        {
          metric: "Crowd Density",
          current: "0.7",
          simulated: "N/A",
          change: "N/A",
          status: "info",
        },
        {
          metric: "Response Time",
          current: "2.1 min",
          simulated: "N/A",
          change: "N/A",
          status: "info",
        },
        {
          metric: "Safety Score",
          current: "98.5%",
          simulated: "N/A",
          change: "N/A",
          status: "info",
        },
      ];
    }

    return [
      {
        metric: "Estimated Impact",
        current: "Normal",
        simulated: analysisResult.situation || "Unknown",
        change: analysisResult.estimated_count
          ? `+${analysisResult.estimated_count} people`
          : "N/A",
        status: analysisResult.estimated_count > 100 ? "critical" : "warning",
      },
      {
        metric: "Response Plan",
        current: "Standard Protocol",
        simulated: analysisResult.plan ? "Custom Plan" : "N/A",
        change: analysisResult.plan ? "Modified" : "N/A",
        status: analysisResult.plan ? "success" : "info",
      },
      {
        metric: "Crew Requirements",
        current: "50 crew",
        simulated: analysisResult.estimated_count
          ? `${Math.ceil(analysisResult.estimated_count / 20)} crew`
          : "N/A",
        change: analysisResult.estimated_count
          ? `+${Math.ceil(analysisResult.estimated_count / 20) - 50}`
          : "N/A",
        status: analysisResult.estimated_count > 100 ? "warning" : "success",
      },
      {
        metric: "Safety Level",
        current: "High",
        simulated: analysisResult.estimated_count > 100 ? "Medium" : "High",
        change: analysisResult.estimated_count > 100 ? "-1 level" : "No change",
        status: analysisResult.estimated_count > 100 ? "warning" : "success",
      },
    ];
  };

  const simulationResults = getSimulationResults();

  return (
    <Box
      sx={{
        display: "flex",
        minHeight: "100vh",
        bgcolor: "background.default",
        overflow: "auto",
      }}
    >
      <DashboardSidebar />

      {/* Main Content */}
      <Box
        component="main"
        sx={{
          flexGrow: 1,
          p: 3,
          ml: { md: 0 },
          mt: { xs: 7, md: 0 },
          overflow: "auto",
          height: "100vh",
        }}
      >
        {/* Top Bar */}
        <Box
          sx={{
            display: "flex",
            justifyContent: "space-between",
            alignItems: "center",
            mb: 4,
            flexWrap: "wrap",
            gap: 2,
          }}
        >
          <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
            <Paper
              component="form"
              sx={{
                p: "2px 4px",
                display: "flex",
                alignItems: "center",
                width: 300,
                borderRadius: 2,
              }}
            >
              <InputBase
                sx={{ ml: 1, flex: 1 }}
                placeholder="Search scenarios..."
                inputProps={{ "aria-label": "search" }}
              />
              <IconButton type="button" sx={{ p: "10px" }} aria-label="search">
                <SearchIcon />
              </IconButton>
            </Paper>
          </Box>

          <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
            <Button
              variant="contained"
              startIcon={<PlayArrow />}
              sx={{ borderRadius: 2 }}
              onClick={runWhatIfAnalysis}
              disabled={loading}
            >
              {loading ? "Running Analysis..." : "Run Simulation"}
            </Button>
            <Button
              variant="outlined"
              startIcon={<Refresh />}
              sx={{ borderRadius: 2 }}
              onClick={() => {
                setScenario("");
                setAnalysisResult(null);
              }}
            >
              Reset
            </Button>
            <Button
              variant="outlined"
              startIcon={<Download />}
              onClick={exportResultsToPDF}
              sx={{ borderRadius: 2 }}
            >
              Export Results
            </Button>
          </Box>
        </Box>

        {/* Hero Banner */}
        <Paper
          sx={{
            p: 4,
            mb: 4,
            borderRadius: 3,
            background: "linear-gradient(135deg, #06B6D4 0%, #22D3EE 100%)",
            color: "white",
            position: "relative",
            overflow: "hidden",
          }}
        >
          <Box sx={{ position: "relative", zIndex: 2 }}>
            <Typography variant="h4" sx={{ fontWeight: "bold", mb: 2 }}>
              What-If Analysis Center
            </Typography>
            <Typography variant="h6" sx={{ mb: 3, opacity: 0.9 }}>
              Simulate different scenarios and analyze potential outcomes for
              your crowd control operations. Make informed decisions with
              data-driven insights.
            </Typography>
            <Box sx={{ display: "flex", gap: 2 }}>
              <Chip
                label="AI-Powered"
                sx={{ bgcolor: "rgba(255,255,255,0.2)", color: "white" }}
              />
              <Chip
                label="Real-Time"
                sx={{ bgcolor: "rgba(255,255,255,0.2)", color: "white" }}
              />
              <Chip
                label="Predictive"
                sx={{ bgcolor: "rgba(255,255,255,0.2)", color: "white" }}
              />
            </Box>
          </Box>

          {/* Decorative Elements */}
          <Box
            sx={{
              position: "absolute",
              top: -20,
              right: -20,
              width: 100,
              height: 100,
              borderRadius: "50%",
              bgcolor: "rgba(255,255,255,0.1)",
              zIndex: 1,
            }}
          />
        </Paper>

        <Grid container spacing={3}>
          {/* Scenario Selection */}
          <Grid item xs={12} lg={4}>
            <Card sx={{ borderRadius: 3, boxShadow: 2 }}>
              <CardContent>
                <Typography variant="h6" sx={{ fontWeight: "bold", mb: 3 }}>
                  Scenario Parameters
                </Typography>

                <Box sx={{ mb: 3 }}>
                  <FormControl fullWidth sx={{ mb: 2 }}>
                    <InputLabel>Event Type</InputLabel>
                    <Select
                      value={eventType}
                      label="Event Type"
                      onChange={(e) => setEventType(e.target.value)}
                    >
                      <MenuItem value="concert">Concert</MenuItem>
                      <MenuItem value="festival">Festival</MenuItem>
                      <MenuItem value="sports">Sports Event</MenuItem>
                      <MenuItem value="conference">Conference</MenuItem>
                    </Select>
                  </FormControl>

                  <FormControl fullWidth sx={{ mb: 2 }}>
                    <InputLabel>Crowd Size</InputLabel>
                    <Select
                      value={crowdSize}
                      label="Crowd Size"
                      onChange={(e) => setCrowdSize(e.target.value)}
                    >
                      <MenuItem value="small">Small (1K-5K)</MenuItem>
                      <MenuItem value="medium">Medium (5K-15K)</MenuItem>
                      <MenuItem value="large">Large (15K-50K)</MenuItem>
                      <MenuItem value="mega">Mega (50K+)</MenuItem>
                    </Select>
                  </FormControl>

                  <TextField
                    fullWidth
                    label="Custom Scenario"
                    multiline
                    rows={3}
                    placeholder="Describe your specific scenario (e.g., 'rain', 'fire', 'power outage')..."
                    value={scenario}
                    onChange={(e) => setScenario(e.target.value)}
                  />
                </Box>

                <Divider sx={{ my: 2 }} />

                <Typography
                  variant="subtitle2"
                  sx={{ fontWeight: "bold", mb: 2 }}
                >
                  Quick Scenarios
                </Typography>

                {scenarios.map((scenarioItem) => (
                  <Paper
                    key={scenarioItem.id}
                    sx={{
                      p: 2,
                      mb: 2,
                      borderRadius: 2,
                      border: "1px solid",
                      borderColor: "divider",
                      cursor: "pointer",
                      "&:hover": {
                        boxShadow: 2,
                        borderColor: scenarioItem.color,
                      },
                    }}
                    onClick={() => setScenario(scenarioItem.name.toLowerCase())}
                  >
                    <Box sx={{ display: "flex", alignItems: "center", gap: 2 }}>
                      <Avatar sx={{ bgcolor: scenarioItem.color }}>
                        {scenarioItem.icon}
                      </Avatar>
                      <Box sx={{ flexGrow: 1 }}>
                        <Typography
                          variant="subtitle2"
                          sx={{ fontWeight: "bold" }}
                        >
                          {scenarioItem.name}
                        </Typography>
                        <Typography variant="caption" color="text.secondary">
                          {scenarioItem.description}
                        </Typography>
                      </Box>
                      <Chip
                        label={scenarioItem.complexity}
                        size="small"
                        color={
                          scenarioItem.complexity === "High"
                            ? "error"
                            : scenarioItem.complexity === "Medium"
                            ? "warning"
                            : "success"
                        }
                      />
                    </Box>
                  </Paper>
                ))}
              </CardContent>
            </Card>
          </Grid>

          {/* Simulation Results */}
          <Grid item xs={12} lg={8}>
            <Card sx={{ borderRadius: 3, boxShadow: 2, mb: 3 }}>
              <CardContent>
                <Box
                  sx={{
                    display: "flex",
                    justifyContent: "space-between",
                    alignItems: "center",
                    mb: 3,
                  }}
                >
                  <Typography variant="h6" sx={{ fontWeight: "bold" }}>
                    Simulation Results
                  </Typography>
                  <Chip
                    label={analysisResult ? "Analysis Complete" : "No Analysis"}
                    color={analysisResult ? "success" : "default"}
                    size="small"
                  />
                </Box>

                {/* Analysis Result Display */}
                {analysisResult && (
                  <Paper
                    sx={{
                      p: 3,
                      mb: 3,
                      borderRadius: 2,
                      bgcolor: "primary.light",
                      color: "primary.contrastText",
                      height: "100%",
                    }}
                  >
                    <Typography variant="h6" sx={{ fontWeight: "bold", mb: 2 }}>
                      AI Analysis Result
                    </Typography>
                    <Typography variant="body1" sx={{ mb: 1 }}>
                      <strong>Situation:</strong> {analysisResult.situation}
                    </Typography>
                    <Typography variant="body1" sx={{ mb: 1 }}>
                      <strong>Estimated Impact:</strong>{" "}
                      {analysisResult.estimated_count} people affected
                    </Typography>
                    <Typography variant="body1">
                      <strong>Response Plan:</strong> {analysisResult.plan}
                    </Typography>
                  </Paper>
                )}

                <Grid container spacing={2}>
                  {simulationResults.map((result, index) => (
                    <Grid item xs={12} sm={6} key={index}>
                      <Paper
                        sx={{
                          p: 3,
                          borderRadius: 2,
                          border: "1px solid",
                          borderColor:
                            result.status === "critical"
                              ? "critical.main"
                              : result.status === "warning"
                              ? "warning.main"
                              : "divider",
                        }}
                      >
                        <Typography
                          variant="subtitle2"
                          sx={{ fontWeight: "bold", mb: 2 }}
                        >
                          {result.metric}
                        </Typography>
                        <Box
                          sx={{
                            display: "flex",
                            justifyContent: "space-between",
                            mb: 1,
                          }}
                        >
                          <Typography variant="body2" color="text.secondary">
                            Current: {result.current}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            Simulated: {result.simulated}
                          </Typography>
                        </Box>
                        <Chip
                          label={result.change}
                          size="small"
                          color={
                            result.status === "critical" ? "error" : "warning"
                          }
                          sx={{ fontWeight: "bold" }}
                        />
                      </Paper>
                    </Grid>
                  ))}
                </Grid>
              </CardContent>
            </Card>

            {/* Recommendations - Only show after API call */}
            {recommendations.length > 0 && (
              <Card sx={{ borderRadius: 3, boxShadow: 2 }}>
                <CardContent>
                  <Typography variant="h6" sx={{ fontWeight: "bold", mb: 3 }}>
                    Recommendations
                  </Typography>

                  {recommendations.map((rec, index) => (
                    <Paper
                      key={index}
                      sx={{
                        p: 3,
                        mb: 2,
                        borderRadius: 2,
                        border: "1px solid",
                        borderColor:
                          rec.type === "critical"
                            ? "critical.main"
                            : rec.type === "warning"
                            ? "warning.main"
                            : "safe.main",
                      }}
                    >
                      <Box
                        sx={{
                          display: "flex",
                          justifyContent: "space-between",
                          alignItems: "center",
                        }}
                      >
                        <Box>
                          <Typography
                            variant="subtitle1"
                            sx={{ fontWeight: "bold", mb: 1 }}
                          >
                            {rec.title}
                          </Typography>
                          <Typography variant="body2" color="text.secondary">
                            {rec.description}
                          </Typography>
                        </Box>
                        <Chip
                          label={rec.priority}
                          color={
                            rec.priority === "High"
                              ? "error"
                              : rec.priority === "Medium"
                              ? "warning"
                              : "success"
                          }
                          sx={{ fontWeight: "bold" }}
                        />
                      </Box>
                    </Paper>
                  ))}
                </CardContent>
              </Card>
            )}
          </Grid>
        </Grid>
      </Box>
    </Box>
  );
};

export default WhatIfPage;
